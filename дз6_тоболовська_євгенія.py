# -*- coding: utf-8 -*-
"""ДЗ6_Тоболовська Євгенія.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17vQub4IxI6RIkUFlWITK3SVZWjDnAl7e

Завдання 1
"""

import networkx as nx
import matplotlib.pyplot as plt

# Створення графа для моделювання реальної мережі

# Вершини - це зупинки транспорту, ребра - шляхи між зупинками

# Створення направленого графа
G = nx.DiGraph()

# Додавання вершин (зупинок)
stops = ["Stop1", "Stop2", "Stop3", "Stop4", "Stop5"]
G.add_nodes_from(stops)

# Додавання ребер (шляхів між зупинками)
edges = [("Stop1", "Stop2"), ("Stop2", "Stop3"), ("Stop3", "Stop4"),
         ("Stop4", "Stop5"), ("Stop5", "Stop1"), ("Stop3", "Stop1")]
G.add_edges_from(edges)

# Візуалізація графа
plt.figure(figsize=(8, 6))
nx.draw(G, with_labels=True, node_color='lightblue',
        node_size=2000, edge_color='grey', linewidths=1, font_size=15)
plt.title("Транспортна мережа міста")
plt.show()

# Аналіз основних характеристик графа
num_nodes = G.number_of_nodes()
num_edges = G.number_of_edges()
degrees = [G.degree(node) for node in G.nodes()]

# Виведення результатів аналізу
num_nodes, num_edges, degrees

"""Завдання 2"""

# Використання алгоритмів DFS і BFS для знаходження шляхів у графі

# Пошук у глибину (DFS)
dfs_tree = nx.dfs_tree(G, source="Stop1")
dfs_paths = list(nx.all_simple_paths(G, source="Stop1", target="Stop5"))

# Пошук у ширину (BFS)
bfs_tree = nx.bfs_tree(G, source="Stop1")
bfs_paths = list(nx.all_simple_paths(G, source="Stop1", target="Stop5"))

# Візуалізація результатів
plt.figure(figsize=(12, 5))

# Візуалізація DFS
plt.subplot(121)
nx.draw(dfs_tree, with_labels=True, node_color='lightblue',
        node_size=2000, edge_color='grey', linewidths=1, font_size=15)
plt.title("DFS Tree")

# Візуалізація BFS
plt.subplot(122)
nx.draw(bfs_tree, with_labels=True, node_color='lightgreen',
        node_size=2000, edge_color='grey', linewidths=1, font_size=15)
plt.title("BFS Tree")

plt.show()

# Виведення результатів
dfs_paths, bfs_paths

"""Завдання 3"""

# Додавання ваг до ребер графа
# Припустимо, ваги відображають відстань між зупинками
weights = {("Stop1", "Stop2"): 5, ("Stop2", "Stop3"): 6, ("Stop3", "Stop4"): 4,
           ("Stop4", "Stop5"): 7, ("Stop5", "Stop1"): 3, ("Stop3", "Stop1"): 2}

# Додавання ваг до ребер
for edge, weight in weights.items():
    G[edge[0]][edge[1]]['weight'] = weight

# Використання алгоритму Дейкстри для знаходження найкоротших шляхів
shortest_paths = {node: nx.single_source_dijkstra_path(G, node) for node in G.nodes()}

# Виведення найкоротших шляхів
shortest_paths